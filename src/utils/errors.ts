export enum ErrorCode {
  CONVERSATION_LIMIT = 'CONVERSATION_LIMIT',
  UNKOWN_ERROR = 'UNKOWN_ERROR',
  CHATGPT_CLOUDFLARE = 'CHATGPT_CLOUDFLARE',
  CHATGPT_UNAUTHORIZED = 'CHATGPT_UNAUTHORIZED',
  CHATGPT_AUTH = 'CHATGPT_AUTH',
  GPT4_MODEL_WAITLIST = 'GPT4_MODEL_WAITLIST',
  BING_UNAUTHORIZED = 'BING_UNAUTHORIZED',
  BING_CAPTCHA = 'BING_CAPTCHA',
  API_KEY_NOT_SET = 'API_KEY_NOT_SET',
  BARD_EMPTY_RESPONSE = 'BARD_EMPTY_RESPONSE',
  BARD_UNAUTHORIZED = 'BARD_UNAUTHORIZED',
  MISSING_POE_HOST_PERMISSION = 'MISSING_POE_HOST_PERMISSION',
  POE_UNAUTHORIZED = 'POE_UNAUTHORIZED',
  MISSING_HOST_PERMISSION = 'MISSING_HOST_PERMISSION',
  XUNFEI_UNAUTHORIZED = 'XUNFEI_UNAUTHORIZED',
  NETWORK_ERROR = 'NETWORK_ERROR',
  POE_MESSAGE_LIMIT = 'POE_MESSAGE_LIMIT',
  LMSYS_SESSION_EXPIRED = 'LMSYS_SESSION_EXPIRED',
  CHATGPT_INSUFFICIENT_QUOTA = 'CHATGPT_INSUFFICIENT_QUOTA',
  CLAUDE_WEB_UNAUTHORIZED = 'CLAUDE_WEB_UNAUTHORIZED',
  CLAUDE_WEB_UNAVAILABLE = 'CLAUDE_WEB_UNAVAILABLE',
  CLAUDE_INSUFFICIENT_QUOTA = 'CLAUDE_INSUFFICIENT_QUOTA',
  QIANWEN_WEB_UNAUTHORIZED = 'QIANWEN_WEB_UNAUTHORIZED',
  BAICHUAN_WEB_UNAUTHORIZED = 'BAICHUAN_WEB_UNAUTHORIZED',
  LMSYS_WS_ERROR = 'LMSYS_WS_ERROR',
  PPLX_FORBIDDEN_ERROR = 'PPLX_FORBIDDEN_ERROR',
  TWITTER_UNAUTHORIZED = 'TWITTER_UNAUTHORIZED',
  GROK_UNAVAILABLE = 'GROK_UNAVAILABLE',
  GEMINI_API_ERROR = 'GEMINI_API_ERROR',
  GEMINI_UNAUTHORIZED = 'GEMINI_UNAUTHORIZED',
  GEMINI_CONFIGURATION_ERROR = 'GEMINI_CONFIGURATION_ERROR',
  CUSTOMBOT_CONFIGURATION_ERROR = 'CUSTOMBOT_CONFIGURATION_ERROR',
}

/**
 * Represents a chat-specific error.
 *
 * @param {string} message - The primary error message to be displayed directly in the UI.
 *   e.g., "400 Bad Request; Unsupported value: 'temperature'..."
 *
 * @param {ErrorCode} code - An internal error code for categorizing the error type.
 *
 * @param {any} [cause] - The original error object or full response body from the API.
 *   This is used to display detailed, expandable error information (e.g., the full JSON payload).
 */
export class ChatError extends Error {
  code: ErrorCode
  cause?: any

  constructor(message: string, code: ErrorCode, cause?: any) {
    super(message)
    this.code = code
    this.cause = cause
  }
}
